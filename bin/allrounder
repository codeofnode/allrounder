#! /usr/bin/env node

const Mocha = require('mocha');
const path = require('path');
const os = require('os');
const { mkdirSync, writeFileSync, readdirSync } = require('fs');
const { options, getOptions, parseArguments } = require('../extractArgs');
parseArguments();
Object.assign(options, getOptions(options));

const mochaOptions = options.mocha || {};
if (options.bail) {
  mochaOptions.bail = options.bail;
}
const mocha = new Mocha(mochaOptions);
mocha.addFile(path.join(__dirname, '../test'));

const resolveFile = function resolveFile(cb){
  if (options.file instanceof Promise) {
    options.file.then(function(resp){
      const tmpdir = os.tmpdir();
      try {
        mkdirSync(`${tmpdir}/allroundertests`);
      } catch (er) {
        if (er.code !== 'EEXIST') {
          throw er;
        }
      }
      options.file = `${tmpdir}/allroundertests/test.json`;
      writeFileSync(options.file, JSON.stringify(resp, undefined, 2));
      cb();
    }).catch(function(er){
      console.log(er);
      process.exit(2);
    });
  } else {
    cb();
  }
};

resolveFile(function(){
  mocha.run(function(ex){
    if ((typeof options.pipePath === 'string' && options.pipePath.length)
        && (typeof options.vars === 'object' && options.vars !== null)) {
      writeFileSync(options.pipePath, JSON.stringify(options.vars, undefined, 2));
    }
    process.exit(ex);
  });
});
